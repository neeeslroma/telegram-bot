import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import FSInputFile
from aiogram.filters import Command
from aiogram.utils import markdown
from aiogram.fsm.storage.memory import MemoryStorage

# üîπ –í–∞—à API-—Ç–æ–∫–µ–Ω
API_TOKEN = "7735427380:AAGQgL3Arrl4evlhf0vg7X4Pu1iGLS03DjU"

# üîπ –î–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∞
ADMIN_ID = 770819003  # –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —ç—Ç–æ —Ç–≤–æ–π –Ω–∞—Å—Ç–æ—è—â–∏–π ID

# üîπ –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üîπ –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å –ø–∞–º—è—Ç—å—é
bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# üîπ –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –∞ —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥ ‚Äî –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    photo_path = "photo_olga.jpg"

    try:
        photo = FSInputFile(photo_path)
        await message.answer_photo(
            photo=photo,
            caption="–í—ñ—Ç–∞—é!\n–î—è–∫—É—é –∑–∞ –ø—ñ–¥–ø–∏—Å–∫—É —Ç–∞ —É–≤–∞–≥—É –¥–æ –º–æ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏!\n"
                    "–ú–µ–Ω–µ –∑–≤—É—Ç—å –û–ª—å–≥–∞ —ñ —è –ø—Ä–∞–∫—Ç–∏–∫—É—é—á–∏–π —Ç–∞—Ä–æ–ª–æ–≥, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞—à–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.")
        logging.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_data[message.from_user.id] = {
        "stage": 1,
        "answers": [],
        "phone": message.from_user.phone_number if hasattr(message.from_user, 'phone_number') else "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–¥–∞–Ω–æ"
    }

    await asyncio.sleep(7)
    await send_second_message(message)

async def send_second_message(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 7 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ."""
    await message.answer(
        text="–ù–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –≤–∞—à–µ —ñ–º'—è, –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è. "
             "–¢–∞–∫–æ–∂ –±—É–¥—É –≤–¥—è—á–Ω–∞ –∑–∞ —Å—Ç–∏—Å–ª–∏–π –æ–ø–∏—Å —Å–∏—Ç—É–∞—Ü—ñ—ó, —â–æ–¥–æ –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è.\n\n"
             "–Ø–∫—â–æ –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ —Å—Ç–æ—Å—É–Ω–∫–∏, —Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —â–µ –π —ñ–º'—è –≤–∞—à–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞."
    )
    user_data[message.from_user.id]["stage"] = 2

@dp.message(F.text)
async def third_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if message.from_user.id not in user_data or user_data[message.from_user.id]["stage"] != 2:
        return

    user_data[message.from_user.id]["answers"].append(message.text)

    await message.answer(
        text="–û—á—ñ–∫—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –≤–ø—Ä–æ–¥–æ–≤–∂ 48 –≥–æ–¥–∏–Ω, –¥—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è!"
    )

    user_data[message.from_user.id]["stage"] = 3

    logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É ({ADMIN_ID})...")
    await asyncio.sleep(10)
    await send_admin_notification(message.from_user.id, message.from_user.username)

async def send_admin_notification(user_id, username):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    if user_id not in user_data or user_data[user_id].get("stage") != 3:
        logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: user_id {user_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥")
        return

    phone_number = user_data[user_id].get("phone", "‚ùå –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–¥–∞–Ω–æ")
    answers = user_data[user_id].get("answers", [])

    if not answers:
        answers_text = "‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –Ω–∞–¥–∞–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."
    else:
        answers_text = "\n\n".join([f"‚ùì {i + 1}) {ans}" for i, ans in enumerate(answers)])

    admin_message = (
        f"üîî –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–æ—Ä–∏—Å—Ç–∞–≤—Å—è –±–æ—Ç–æ–º!\n\n"
        f"üë§ Username: @{username or '–ù–µ–º–∞—î'}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}\n\n"
        f"üì© –ô–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n{answers_text}"
    )

    try:
        logging.info(f"üì® –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É ({ADMIN_ID})...")
        await bot.send_message(ADMIN_ID, admin_message)
        logging.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ ({ADMIN_ID})!")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {e}")

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
